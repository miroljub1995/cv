{"version":3,"sources":["data/profileImage.jpg","components/PersonalInfo.tsx","components/Education.tsx","components/Descriptions.tsx","Utils.ts","components/Keywords.tsx","components/Experiances.tsx","components/Projects.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Contact","className","href","data","mobile","email","city","country","linkedIn","target","rel","github","PersonalInfo","src","profileImage","alt","Items","studies","map","key","university","from","to","school","department","GPA","GPAByNow","val","desc","i","cases","switchExp","type","value","w","experiences","exp","position","companyLink","company","location","descriptions","keywords","projects","project","name","App","Projects","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.690becef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profileImage.05cc83de.jpg\";","import React from 'react'\r\nimport './PersonalInfo.css'\r\nimport * as data from '../data/personalInfo.json'\r\nimport profileImage from '../data/profileImage.jpg'\r\n\r\nconst Contact = () => (\r\n  <div className='contact'>\r\n    <div>\r\n      <p>Mobile:</p>\r\n      <a href={`tel:${data.contact.mobile}`}>{data.contact.mobile}</a>\r\n    </div>\r\n    <div>\r\n      <p>Email:</p>\r\n      <a href={`mailto:${data.contact.email}`}>{data.contact.email}</a>\r\n    </div>\r\n    <div>\r\n      <p>Location:</p>\r\n      <p>{`${data.contact.city}, ${data.contact.country}`}</p>\r\n    </div>\r\n    <div>\r\n      <p>LinkedIn:</p>\r\n      <a href={data.contact.linkedIn} target=\"_blank\" rel=\"noopener noreferrer\">Visit profile</a>\r\n    </div>\r\n    <div>\r\n      <p>GitHub:</p>\r\n      <a href={data.contact.github} target=\"_blank\" rel=\"noopener noreferrer\">Visit profile</a>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default function PersonalInfo() {\r\n  return (\r\n    <div className='personal-info'>\r\n      <img className='profile-image' src={profileImage} alt='' />\r\n      <h1>Miroljub Tomic</h1>\r\n      <h3>Personal info</h3>\r\n      <div className='birth-date'>\r\n        <p>Birth date</p>\r\n        <p>{data.birthDate}</p>\r\n      </div>\r\n      <p className='align-justify'>{data.aboutMe}</p>\r\n      <h3>Contact</h3>\r\n      <Contact />\r\n      <h3>Soft skills</h3>\r\n      <p className='align-justify'>{data.softSkills}</p>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport { studies } from '../data/education.json'\r\nimport './Education.css'\r\n\r\ntype Studies = {\r\n  university: string,\r\n  from: string,\r\n  to: string,\r\n  school: string,\r\n  studies: string,\r\n  department: string,\r\n  module?: string,\r\n  GPAByNow?: string,\r\n  GPA?: string\r\n}\r\n\r\nconst Items = () => (\r\n  <div className='column'>\r\n    {studies.map((studies: Studies, key) => (\r\n      <div key={key} className='studies column'>\r\n        <div className='wrap'>\r\n          <b>{studies.university}</b>\r\n          <p>{`${studies.from} - ${studies.to}`}</p>\r\n        </div>\r\n        <div>\r\n          {`${studies.school}`}\r\n        </div>\r\n        <div>{`${studies.studies}, Department of ${studies.department}${studies.GPA ? \r\n          `, GPA: ${studies.GPA}` : studies.GPAByNow ? `, GPA by now: ${studies.GPAByNow}` : ''}`}</div>\r\n      </div>\r\n    ))}\r\n  </div>\r\n)\r\n\r\nexport default () => (\r\n  <>\r\n    <h3>Education</h3>\r\n    <Items />\r\n  </>\r\n)","import React from \"react\";\r\nimport './Descriptions.css'\r\nimport { switchExp } from \"../Utils\";\r\n\r\nexport default ({ val }: { val: { type: string, value: string | string[] }[] }) => (\r\n  <div className='column desc'>\r\n    {val.map((desc, i) => switchExp(desc.type, {\r\n      'text': () => (<span key={i}>{desc.value}</span>),\r\n      'list': () => (\r\n        <ul key={i}>\r\n          {(desc.value as string[]).map((val) => (\r\n            <li key={val}>{val}</li>\r\n          ))}\r\n        </ul>\r\n      )\r\n    }))}\r\n  </div>\r\n)","\r\nfunction switchExp<Te extends string | number, Tr>(val: Te, cases: { [caseV in Te]: () => Tr } & { 'default': () => Tr }): Tr\r\nfunction switchExp<Te extends string | number, Tr>(val: Te, cases: { [caseV in Te]: () => Tr }): Tr | null\r\nfunction switchExp<Te extends string | number, Tr>(val: Te, cases: { [caseV in Te]: () => Tr } & { 'default': () => Tr } | { [caseV in Te]: () => Tr }): Tr | null {\r\n  if (val in cases)\r\n    return cases[val]()\r\n  if ('default' in cases)\r\n    return cases['default']()\r\n  return null\r\n}\r\n\r\nexport { switchExp }","import React from 'react'\r\nimport './Keywords.css'\r\n\r\nexport default ({ val }: { val: string[] }) => (\r\n  <ul className='keywords'>\r\n    {val.map(w => (\r\n      <li key={w}>{w}</li>\r\n    ))}\r\n  </ul>\r\n)","import React from 'react'\r\nimport { experiences } from '../data/experiences.json'\r\nimport Descriptions from './Descriptions'\r\nimport './Experiances.css'\r\nimport Keywords from './Keywords'\r\n\r\nconst Items = () => (\r\n  <>\r\n    {experiences.map((exp, i) => (\r\n      <div key={i} className='column exp marg-l-20'>\r\n        <div className='wrap'>\r\n          <b>\r\n            <span>{exp.position} in </span>\r\n            <a href={exp.companyLink} target=\"_blank\" rel=\"noopener noreferrer\">{exp.company}</a>\r\n          </b>\r\n          <span>{`${exp.location} ${exp.from} - ${exp.to}`}</span>\r\n        </div>\r\n        <Descriptions val={exp.descriptions} />\r\n        <Keywords val={exp.keywords} />\r\n      </div>\r\n    ))}\r\n  </>\r\n)\r\n\r\nexport default () => (\r\n  <>\r\n    <h3>Experience</h3>\r\n    <Items />\r\n  </>\r\n)","import React from \"react\";\r\nimport { projects } from '../data/projects.json'\r\nimport Keywords from \"./Keywords\";\r\nimport Descriptions from \"./Descriptions\";\r\n\r\nconst Items = () => (\r\n  <>\r\n    {projects.map(project => (\r\n      <div key={project.name} className='column marg-l-20'>\r\n        <b>{project.name}</b>\r\n        <Descriptions val={project.descriptions} />\r\n        <Keywords val={project.keywords} />\r\n      </div>\r\n    ))}\r\n  </>\r\n)\r\n\r\nexport default () => (\r\n  <>\r\n    <h3>Projects</h3>\r\n    <Items />\r\n  </>\r\n)","import React from 'react'\nimport './App.css'\nimport PersonalInfo from './PersonalInfo'\nimport Education from './Education'\nimport Experiances from './Experiances'\nimport Projects from './Projects'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className='column'>\n        <PersonalInfo />\n      </div>\n      <div className='column'>\n        <Education />\n        <Experiances />\n        <Projects />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}